using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class SingleTon : MonoBehaviour
{
	//========================================
	//##		디자인 패턴 SingleTon		##
	//========================================
	/*
		싱글톤 패턴 :
		오직 한 개의 클래스 인스턴스만을 갖도록 보장, 이에 대한 전역적인 접근점을 제공
		(딱 하나만 있도록 관리가 필요한 상황에서 쓰임)

		구현 :
		1. 전역에서 접근 가능한 인스턴스의 주소를 갖기 위해 데이터 영역 메모리 공간을 활용함 (정적변수로 생성)
		2. 정적변수를 활용하여 캡슐화를 진행
		3. 생성자의 접근권한을 외부에서 생성할 수 없도록 제한 -> 생성자가 private가 되면 new를 통한 생성이 불가능 함
		4. Instance 속성를 통해 인스턴스에 접근할 수 있도록 함
		5. instance 변수는 단 하나만 있도록 유지

		장점 :
		1. 하나뿐인 존재로 주요 클래스, 관리자의 역할을 함
		2. 전역적 접근으로 참조에 필요한 작업이 없이 빠른접근가능
		3. 인스턴스들이 싱글톤을 통하여 데이터를 공유하기 쉬워짐
	
		단점 :
		1. 싱글톤이 너무 많은 책임을 짊어지는 경우를 주의해야함 (싱글톤이 쓰다보면 편해서 남발하는 경우가 생길 수 있으니 주의하기)
		2. 싱글톤의 남발로 전역접근이 많아지게 되는 경우, 참조한 코드 결합도가 높아짐
		3. 싱글톤의 데이터를 공유할 경우 데이터 변조에 주의해야함 
			(자동 사냥으로 골드가 계속 올라가고 있는 시점에서 상점에서 골드를 씀 -> 순서대로 잘 처리 안하면 쓴 골드가 차감되지 않거나 얻은 골드가 증가하지 않을 수 있음)
			-> 대입 연산 보다는 플러스, 마이너스 연산을 사용하는 것을 추천함

		정리.
		싱글톤 매우 편함. BUT 남발을 주의 + 기능 몰빵 주의
		-> 게임에서 딱 하나만 존재해야하는 것 외에는 사용하도록 하기!!
	*/


	private static SingleTon instance;

	public static SingleTon Instance
	{
		get
		{
			if (instance == null)
				instance = new SingleTon();

			return instance;
		}
	}

	private SingleTon() { } //생성자 private으로 선언해 외부에서 인스턴스를 생성하지 못하도록 수정
}
